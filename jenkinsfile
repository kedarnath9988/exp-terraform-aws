pipeline{
    agent{
        label 'agent-01'
    }
    options{
        timeout(time:15, unit: "MINUTES")
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'terraform_action', choices: ['apply', 'destroy' ], description: 'Pick something')
    }

    stages{
        stage("init"){
            steps{
               sh  """
                 cd 01-sg
                 terraform init -reconfigure 
                 """
            }
            }
            stage("plan"){
                when{
                    expression{
                        params.terraform_action == 'apply'
                    }
                }

                steps{
                  sh    """
                  cd 01-sg
                 terraform plan
                
                """
                }
                }
            stage("Deploy"){
                when{
                    expression{
                        params.terraform_action == 'apply'
                    }
                }
                input {
                message "Should we continue?"
                ok "Yes, we should."
                }
                steps{    
                  sh  """
                 cd 01-sg
                 terraform apply -auto-approve 

                """
                 }
            }
        
        stage("Deploy"){
                when{
                    expression{
                        params.terraform_action == 'destroy'
                    }
                }
                input {
                message "Should we continue?"
                ok "Yes, we should."
                }
                steps{    
                  sh  """
                 cd 01-sg
                 terraform apply -auto-approve 

                """
                 }
            }
        
        post {
             always {
                    deleteDir() /* clean up our workspace */
                     echo   'I will always say Hello again!'
        }
        failure {
            echo   'I pipeline failed '
        }
        success {
            echo   'I will run  success !'
        }
        changed {
            echo ' there is change in the cureent build from the last build '
        }
        fixed {
            echo ' current pipeline is successful but the previous build is faulure '
        }
    }
    
}

}
    
